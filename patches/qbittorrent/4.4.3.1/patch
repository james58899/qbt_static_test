--- qBittorrent/src/base/net/downloadhandlerimpl.cpp
+++ /home/username/downloadhandlerimpl.cpp
@@ -34,17 +34,20 @@
 
 #include "base/3rdparty/expected.hpp"
 #include "base/utils/fs.h"
-#include "base/utils/gzip.h"
 #include "base/utils/io.h"
 #include "base/utils/misc.h"
 
-const int MAX_REDIRECTIONS = 20;  // the common value for web browsers
+#ifdef QT_NO_COMPRESS
+#include "base/utils/gzip.h"
+#endif
 
+const int MAX_REDIRECTIONS = 20; // the common value for web browsers
+
 namespace
 {
     nonstd::expected<QString, QString> saveToTempFile(const QByteArray &data)
     {
-        QTemporaryFile file {Utils::Fs::tempPath()};
+        QTemporaryFile file{Utils::Fs::tempPath()};
         if (!file.open() || (file.write(data) != data.length()) || !file.flush())
             return nonstd::make_unexpected(file.errorString());
 
@@ -54,9 +57,7 @@
 }
 
 DownloadHandlerImpl::DownloadHandlerImpl(Net::DownloadManager *manager, const Net::DownloadRequest &downloadRequest)
-    : DownloadHandler {manager}
-    , m_manager {manager}
-    , m_downloadRequest {downloadRequest}
+    : DownloadHandler{manager}, m_manager{manager}, m_downloadRequest{downloadRequest}
 {
     m_result.url = url();
     m_result.status = Net::DownloadStatus::Success;
@@ -121,9 +122,13 @@
     }
 
     // Success
+#ifdef QT_NO_COMPRESS
     m_result.data = (m_reply->rawHeader("Content-Encoding") == "gzip")
-                    ? Utils::Gzip::decompress(m_reply->readAll())
-                    : m_reply->readAll();
+                        ? Utils::Gzip::decompress(m_reply->readAll())
+                        : m_reply->readAll();
+#else
+    m_result.data = m_reply->readAll();
+#endif
 
     if (m_downloadRequest.saveToFile())
     {
@@ -162,8 +167,7 @@
     {
         m_reply->abort();
         setError(tr("The file size (%1) exceeds the download limit (%2)")
-                 .arg(Utils::Misc::friendlyUnit(bytesTotal)
-                      , Utils::Misc::friendlyUnit(m_downloadRequest.limit())));
+                     .arg(Utils::Misc::friendlyUnit(bytesTotal), Utils::Misc::friendlyUnit(m_downloadRequest.limit())));
         finish();
     }
 }
@@ -195,14 +199,13 @@
     }
 
     auto redirected = static_cast<DownloadHandlerImpl *>(
-                m_manager->download(Net::DownloadRequest(m_downloadRequest).url(newUrlString)));
+        m_manager->download(Net::DownloadRequest(m_downloadRequest).url(newUrlString)));
     redirected->m_redirectionCount = m_redirectionCount + 1;
     connect(redirected, &DownloadHandlerImpl::finished, this, [this](const Net::DownloadResult &result)
-    {
+            {
         m_result = result;
         m_result.url = url();
-        finish();
-    });
+        finish(); });
 }
 
 void DownloadHandlerImpl::setError(const QString &error)
--- qBittorrent/src/base/net/downloadmanager.cpp
+++ /home/username/downloadmanager.cpp
@@ -123,8 +123,10 @@
 
         // Spoof HTTP Referer to allow adding torrent link from Torcache/KickAssTorrents
         request.setRawHeader("Referer", request.url().toEncoded().data());
-        // Accept gzip
+#ifdef QT_NO_COMPRESS
+        // Manually decompress with gzip
         request.setRawHeader("Accept-Encoding", "gzip");
+#endif
         // Qt doesn't support Magnet protocol so we need to handle redirections manually
         request.setAttribute(QNetworkRequest::RedirectPolicyAttribute, QNetworkRequest::ManualRedirectPolicy);
 

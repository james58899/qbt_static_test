# @credits https://github.com/c0re100/qBittorrent-Enhanced-Edition
name: matrix multi build and release - qbt-workflow-files

on:
  workflow_dispatch:
    inputs:
      distinct_id:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os_id: [alpine]
        os_version_id: [edge]
        arch_type: [x86_64, armhf, armv7, aarch64]
        libtorrent_version: ["1.2", "2.0"]
        build_tool: ["", cmake]
        include:
          - build_tool: ""
            qbt_qt_version_name: "qt5-"
            qbt_qt_version: "5"

          - build_tool: "cmake"
            qbt_qt_version_name: ""
            qbt_qt_version: "6"

          - libtorrent_version: "2.0"
            preview_release: false

          - libtorrent_version: "1.2"
            preview_release: true

    name: "${{ matrix.arch_type }}-${{ matrix.qbt_qt_version_name }}libtorrent-v${{ matrix.libtorrent_version }}"

    env:
      build_dir: "qbt-build"
      name: "${{ matrix.arch_type }}-${{ matrix.qbt_qt_version_name }}libtorrent-v${{ matrix.libtorrent_version }}"

    steps:
      - uses: actions/checkout@v3

      - name: Host - update ${{ github.event.inputs.distinct_id }}
        run: sudo apt-get update

      - name: Host - upgrade ${{ github.event.inputs.distinct_id }}
        run: sudo apt-get -y upgrade

      - name: Host - Install host qemu-static ${{ github.event.inputs.distinct_id }}
        run: sudo apt-get install -y qemu binfmt-support qemu-user-static

      - name: Host - Docker multiarch bootstrap ${{ github.event.inputs.distinct_id }}
        run: sudo docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Host - Create Docker template env file ${{ github.event.inputs.distinct_id }}
        run: |
          echo "qbt_build_tool=${{ matrix.build_tool }}" > env.custom
          echo "qbt_cross_name=${{ matrix.arch_type  }}" >> env.custom
          echo "qbt_libtorrent_version=${{ matrix.libtorrent_version }}" >> env.custom
          echo "qbt_qt_version=${{ matrix.qbt_qt_version }}" >> env.custom
          echo "qbt_workflow_files=yes" >> env.custom

      - name: Host - Create docker multiarch container ${{ github.event.inputs.distinct_id }}
        run: docker run --name multiarch -it -d --env-file env.custom -w /root -v ${{ github.workspace }}:/root ${{ matrix.os_id }}:${{ matrix.os_version_id }}

      - name: Docker - apk update ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root cat /etc/os-release

      - name: Docker - apk update ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch apk update

      - name: Docker - apk install bash ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch apk add bash

      - name: Docker - Bootstrap ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh -bs-a

      - name: Host - Bootstrap release tag ${{ github.event.inputs.distinct_id }}
        run: echo "release_tag=$(cat ${{ env.build_dir }}/release_info/tag.md)" >> $GITHUB_ENV

      - name: Host - Bootstrap release title ${{ github.event.inputs.distinct_id }}
        run: echo "release_title=$(cat ${{ env.build_dir }}/release_info/title.md)" >> $GITHUB_ENV

      - name: Docker - libexecinfo ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh libexecinfo

      - name: Docker - zlib-ng ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh zlib

      - name: Docker - iconv ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh iconv

      - name: Docker - icu ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh icu

      - name: Docker - openssl ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh openssl

      - name: Docker - boost ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh boost

      - name: Docker - libtorrent ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh libtorrent

      - name: Docker - double_conversion ${{ github.event.inputs.distinct_id }}
        if: matrix.build_tool == 'cmake'
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh double_conversion

      - name: Docker - qtbase -i ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh qtbase -i

      - name: Docker - qttools ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh qttools

      - name: Docker - qbittorrent ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh qbittorrent

      - name: Docker - "Set release asset name" ${{ github.event.inputs.distinct_id }}
        run: docker exec -w /root/${{ env.build_dir }}/completed multiarch mv -f qbittorrent-nox ${{ matrix.arch_type }}-${{ matrix.qbt_qt_version_name }}qbittorrent-nox

      - name: Host- Create release - tag - assets ${{ github.event.inputs.distinct_id }}
        uses: ncipollo/release-action@v1.10.0
        with:
          prerelease: "${{ matrix.preview_release }}"
          artifacts: "${{ env.build_dir }}/completed/${{ matrix.arch_type }}-${{ matrix.qbt_qt_version_name }}qbittorrent-nox,${{ env.build_dir }}/release_info/dependency-version.json"
          replacesArtifacts: true
          tag: "${{ env.release_tag }}"
          name: "${{ env.release_title }}"
          bodyFile: "${{ env.build_dir }}/release_info/release.md"
          allowUpdates: true
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Archive code coverage results ${{ github.event.inputs.distinct_id }}
        if: matrix.build_tool == 'cmake'
        uses: actions/upload-artifact@v3
        with:
          name: "${{ env.name }}-graphs"
          path: "${{ env.build_dir }}/completed/*.png"

# @credits https://github.com/c0re100/qBittorrent-Enhanced-Edition
name: check for new releases

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */3 * * *"

jobs:
  check_release:
    runs-on: ubuntu-latest
    name: "Check for latest releases or tags"

    steps:
      - uses: actions/checkout@v3

      - name: bootstrap values
        run: |
          declare -A current_github_tag_array
          declare -A current_build_version

          current_github_tag_array[qbittorrent]="$(git ls-remote -q -t --refs "https://github.com/qbittorrent/qBittorrent.git" | awk '{sub("refs/tags/release-", "");sub("(.*)(-[^0-9].*|rc|alpha|beta)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          current_build_version[qbittorrent]="$(curl -sL https://api.github.com/repos/userdocs/qbittorrent-nox-static/releases/latest | jq -r '.body' | grep '|.*Qbittorrent.*|' | awk '{ print $4 }')"
          current_github_tag_array[qt5]="$(git ls-remote -q -t --refs https://github.com/qt/qtbase.git | awk '/v5(.*)-lts-lgpl/{sub("refs/tags/v", ""); print $2 }' | sed 's/-lts-lgpl//g' | awk '!/^$/' | sort -rV | head -n1)"
          current_build_version[qt5]="$(curl -sL https://api.github.com/repos/userdocs/qbittorrent-nox-static/releases/latest | jq -r '.body' | grep '|.*Qt5.*|' | awk '{ print $4 }')"
          current_github_tag_array[qt6]="$(git ls-remote -q -t --refs "https://github.com/qt/qtbase.git" | awk '/v6/{sub("refs/tags/v", ""); sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          current_build_version[qt6]="$(curl -sL https://api.github.com/repos/userdocs/qbittorrent-nox-static/releases/latest | jq -r '.body' | grep '|.*Qt6.*|' | awk '{ print $4 }')"
          current_github_tag_array[libtorrent]="$(git ls-remote -q -t --refs "https://github.com/arvidn/libtorrent.git" | awk '/\/v2/{sub("refs/tags/v", "");sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          current_build_version[libtorrent]="$(curl -sL https://api.github.com/repos/userdocs/qbittorrent-nox-static/releases/latest | jq -r '.body' | grep '|.*Libtorrent.*|' | awk '{ print $4 }')"
          current_github_tag_array[boost]="$(git ls-remote -q -t --refs https://github.com/boostorg/boost.git | awk '{sub("refs/tags/boost-", "");sub("(.*)(rc|alpha|beta)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          current_build_version[boost]="$(curl -sL https://api.github.com/repos/userdocs/qbittorrent-nox-static/releases/latest | jq -r '.body' | grep '|.*Boost.*|' | awk '{ print $4 }')"
          current_github_tag_array[openssl]="$(git ls-remote -q -t --refs "https://github.com/openssl/openssl.git" | awk '/openssl/{sub("refs/tags/openssl-", "");sub("(.*)(v6|rc|alpha|beta)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          current_build_version[openssl]="$(curl -sL https://api.github.com/repos/userdocs/qbittorrent-nox-static/releases/latest | jq -r '.body' | grep '|.*OpenSSL.*|' | awk '{ print $4 }')"

          padding="           "

          for iray in "${!current_github_tag_array[@]}"; do
            if [[ "${current_github_tag_array[$iray]//\./}" -gt "${current_build_version[$iray]//\./}" ]]; then
              printf '%s latest : %s current : %s %s\n' "$iray ${padding:${#iray}}" "${current_github_tag_array[$iray]} ${padding:${#current_github_tag_array[$iray]}}" "${current_build_version[$iray]} ${padding:${#current_build_version[$iray]}}" "<<< New version released - workflow will be triggered"
            else
              printf '%s latest : %s current : %s\n' "$iray ${padding:${#iray}}" "${current_github_tag_array[$iray]} ${padding:${#current_github_tag_array[$iray]}}" "${current_build_version[$iray]} ${padding:${#current_build_version[$iray]}}"
            fi
          done

      - name: Invoke workflow in another repo with inputs
        if: env.trigger_workflow == 'yes'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: matrix multi build and release - qbt-workflow-files
          repo: userdocs/qbittorrent-nox-static
          token: ${{ secrets.MYTOKEN }}
